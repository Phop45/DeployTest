<head>
  <link rel="stylesheet" href="/css/taskCss/task-note.css">
  <!-- <style>
    .contant {
      height: max-content;
    }

    .note_contant {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 0.5fr));
      gap: 20px 30px;
      padding: 30px;
    }

    .addNote,
    .listNote {
      position: relative;
      min-width: 300px;
      height: 300px;
      background-color: #fff385;
      transition: 0.3s;
      overflow: hidden;
    }

    .addNote:hover {
      transform: scale(1.05);
      box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.3);
      border-top-left-radius: 50px;
    }

    .addNote::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 40px;
      /* Adjust width as needed */
      height: 40px;
      /* Adjust height as needed */
      background-color: white;
      border-bottom-left-radius: 10px;
      z-index: -2;
      /* Make sure it's below the yellow triangle */
    }

    .addNote::before {
      content: '';
      position: absolute;
      width: 0;
      height: 0;
      top: 0;
      left: 0;
      border-top: 20px solid transparent;
      border-left: 20px solid transparent;
      border-bottom: 20px solid #ffb700;
      /* Background color */
      border-right: 20px solid #ffb700;
      /* Background color */
      border-top-right-radius: 10px;
      /* Curved edge on the top right */
      transform-origin: top left;
      transform: scale(0.1);
      /* Start with 0 size */
      transition: transform 0.4s;
      z-index: -1;
    }

    .addNote:hover::before {
      transform: scale(1);
    }


    #note-title {
      text-align: center;
      font-size: 18px;
      font-weight: 600;
      padding-top: 20px;
    }

    #note-content {
      font-size: 16px;
      padding: 10px 30px;
    }

    #note-content p {
      width: 240px;
      height: 200px;
      overflow: auto;
      text-overflow: ellipsis;
      scrollbar-width: none;
      text-align: justify;
      font-size: 15px;
    }

    #addNote-title {
      display: flex;
      justify-content: center;
      padding: 20px 0;
    }

    #addNote-title input {
      text-align: center;
      background-color: transparent;
      border: 1px solid transparent;
      font-size: 18px;
      transition: 0.2s;
    }

    #addNote-title input:hover {
      border-bottom: 1px solid rgb(0, 0, 0, 0.3);
    }

    #addNote-title input::placeholder {
      color: rgb(100, 100, 100);
    }

    #addNote-title input:focus {
      outline: none;
      border-bottom: 1px solid rgb(46, 46, 46);
    }

    #content {
      margin-left: 15px;
      width: 90%;
      height: 200px;
      background: transparent;
      border: 1px solid transparent;
      transition: 0.2s;
      border-radius: 5px;
      padding: 10px;
      resize: none;
      font-size: 16px;
      font-weight: 300;
    }

    #content:hover {
      border: 1px solid rgb(0, 0, 0, 0.5);
      border-radius: 5px;
    }

    #content:focus {
      outline: none;
    }


    /* Modal styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgb(0, 0, 0);
      background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
      background-color: #fefefe;
      margin: 15% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
    }

    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }
  </style> -->
  <style>
    .note-created-by {
      display: flex;
      align-items: center;
      margin-top: 10px;
  }
  
  .note-created-by img {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
  }
  
  .note-created-by p {
      margin: 0;
      font-size: 14px;
      color: #333;
  }
  </style>
</head>

<div class="contant">
  <% if (subjects) { %>
    <h1 class="SubName"><%= subjects.SubName %></h1>
  <% } else { %>
    <h1 class="SubName">Subject Not Found</h1>
  <% } %>
  <%- include('../partials/task-navbar.ejs') %>
    <div class="popup-box" id="popupBox">
      <div class="popup">
        <span class="close-popup" id="closePopup"></span>
        <div class="note_contant">
          <form action="/addNotes" method="POST" class="add-form" id="noteForm">
            <div class="addNote">
              <div id="addNote-title">
                <input type="text" name="title" id="title" placeholder="หัวข้อ" required />
              </div>
              <div id="addNote-content">
                <textarea name="content" id="content" placeholder="เนื้อหา" required></textarea>
              </div>
            </div>
            <div class="button-container">
              <button type="submit">เพิ่มโน็ต</button>
            </div>
            <input type="hidden" name="subjectId" id="subjectId" value="<%= subjects._id %>" />
            <input type="hidden" name="noteId" id="noteId" />
          </form>
        </div>
      </div>
    </div>

    <h1 style="padding-left: 50px;
              padding-top: 30px;">โน้ตจดบันทึก</h1>
    <div class="wrapper">
      <li class="add-box" id="addBox">
        <div class="icon"><i class='bx bx-plus'></i></div>
        <p>เพิ่มโน็ตใหม่</p>
      </li>

      <!-- Notes List -->
      <% notes.forEach(note => { %>
        <li class="note contant">
          <div class="details">
            <div class="note-title editable" data-field="title">
              <%= note.title %>
            </div>
            <div class="note-content editable" data-field="content">
              <%= note.content %>
            </div>
            <div class="note-created-by">
              <img src="<%= note.user.profileImage %>" alt="Profile Picture" style="width: 30px; height: 30px; border-radius: 50%; margin-top: 10px;">
              <p>Created by: <%= note.user.displayName %></p>
            </div>
          </div>
          <div class="bottom-content">
            <div class="note-updated">
              <%= new Date(note.updatedAt).toLocaleDateString('th-TH', { day: 'numeric', month: 'short' }) %> เวลา: <%=
                  new Date(note.updatedAt).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit', hour12: false }) %>
            </div>
            <div class="settings">
              <i onclick="showMenu(this)" class="uil uil-ellipsis-h"></i>
              <ul class="menu">
                <li onclick="openUpdateNotePopup('<%= note._id %>', '<%= note.title %>', '<%= note.content %>')">
                  <i class="uil uil-pen"></i>แก้ไข
                </li>
                <li onclick="deleteNote('<%= note._id %>')">
                  <i class="uil uil-trash"></i>ลบ
                </li>
              </ul>
            </div>
          </div>
        </li>
      <% }); %>
    </div>
</div>

<script>
  document.getElementById("addBox").addEventListener("click", function () {
    document.getElementById("popupBox").style.display = "flex";
    resetForm();
  });

  document
    .getElementById("closePopup")
    .addEventListener("click", function () {
      document.getElementById("popupBox").style.display = "none";
    });

  // Close the popup when clicking outside of it
  window.addEventListener("click", function (event) {
    if (event.target === document.getElementById("popupBox")) {
      document.getElementById("popupBox").style.display = "none";
    }
  });

  function showMenu(elem) {
    elem.parentElement.classList.add("show");
    document.addEventListener("click", (e) => {
      if (e.target.tagName != "I" || e.target != elem) {
        elem.parentElement.classList.remove("show");
      }
    });
  }

  function openUpdateNotePopup(noteId, title, content) {
    document.getElementById("title").value = title;
    document.getElementById("content").value = content;
    document.getElementById("noteId").value = noteId;
    document.getElementById("noteForm").action = "/updateNote";
    document.getElementById("popupBox").style.display = "flex";
  }

  async function deleteNote(noteId) {
    try {
      const response = await fetch("/deleteNote", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ noteId }),
      });

      if (response.ok) {
        location.reload(); // Reload the page to reflect the changes
      } else {
        console.error("Failed to delete the note");
      }
    } catch (error) {
      console.error("Error:", error);
    }
  }

  function resetForm() {
    document.getElementById("noteForm").reset();
    const hiddenInput = document.querySelector('input[name="noteId"]');
    if (hiddenInput) hiddenInput.remove();
    document.getElementById("noteForm").action = "/addNotes";
  }
  function getRandomPastelColor() {
    // Generates a pastel color in hexadecimal format
    const r = Math.floor(Math.random() * 128 + 127);
    const g = Math.floor(Math.random() * 128 + 127);
    const b = Math.floor(Math.random() * 128 + 127);
    return `rgb(${r},${g},${b})`;
  }

  document.addEventListener('DOMContentLoaded', function () {
    // Apply a pastel background color to each note
    document.querySelectorAll('.note').forEach(note => {
      note.style.backgroundColor = getRandomPastelColor();
    });

    // Alternatively, if you want to set the color when a note is created (for example, via a form submission)
    const noteForm = document.getElementById('noteForm');
    if (noteForm) {
      noteForm.addEventListener('submit', function () {
        // Apply a pastel color to new notes when the form is submitted
        const newNote = document.createElement('li');
        newNote.classList.add('note', 'contant');
        newNote.style.backgroundColor = getRandomPastelColor();
        // Append newNote to the notes list
        document.querySelector('.wrapper').appendChild(newNote);
      });
    }
  });
</script>
</body>