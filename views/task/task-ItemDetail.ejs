<head>
    <link rel="stylesheet" href="/css/taskCss/list-itemDetail.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        #taskName{
            font-size: 2em;
            font-weight: 400;
            color: #a8aaad;
            border: none;
            border-bottom: 2px solid #7952B3;
        }
        #taskName:focus{
            outline: none;
        }
        .updateTaskForm1{
            display: flex;
            justify-content: space-between;
            align-items: center;
           gap: 20px;
        }
        #taskType,
        #taskStatuses,
        #taskPriority{
            text-align: center;
            width: 120px;
            height: 40px;
            font-size: 1em;
            color: #515761;
            border: 1px solid #D7D9DD;
            border-radius: 5px;
            background-color: transparent;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

        #taskType:focus,
        #taskStatuses:focus,
        #taskPriority:focus{
            outline: none;
        }
        #firstLine #taskType:hover{
            background-color: #7952B3;
            color: white;
            font-weight: 400;
            border: none;
            transition: 0.3s ease;
        }
        #taskStatuses {
            display: none;
        }
        .select-warpper {
            border-radius: 5px;
            background-color: #f2f2f2;
            color: #515761;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 120px;
            height: 40px;
            font-size: 1em;
            text-align: center;
            border: 1px solid #D7D9DD;
            cursor: pointer;
        }
        #statusText h1{
            margin-bottom: 0;
            font-weight: 400;
        }
        #updateDetail{
            width: 130px;
            height: 40px;
            margin-left: 83%;
            border-radius: 5px;
            background-color: #9571cc;
            color: white;
            border: 1px solid #D7D9DD;
            font-size: 1em;
            margin-top: -10px;
        }
        #updateDetail:hover{
            background-color: #7952B3;
            transition: 0.3s ease;
        }
        .subtask-item.completed {
            text-decoration: line-through;
            color: grey;
          }
          .subtask-item {
            margin-bottom: 10px;
          }
          .date {
            font-size: smaller;
            color: grey;
            margin-left: 10px;
          }
    </style>
</head>

<body>
    <%- include('../partials/nav_menu.ejs') %>
    <div class="content">
        <div class="top-option">
            <div class="breadcomes">
                <a href="/subject">subject</a> /
                <a href="/subject/item/<%= subjectId %>/task_list">list</a> /
                <a style="background-color: #7952B3; color: white; border-color: #7952B3;"><%= taskNames %></a>
            </div>
            <div class="btn-option">
                <h1>สร้างเมื่อวันที่ <span id="createAt"><%= createdAt %></span></h1>
                <a href="#" id="close_btn_link"><i id="close_btn" class='bx bx-x'></i></a>
            </div>
        </div>

        <div class="content-Wrap">
            <div class="itemDetail">
                <div id="firstLine">
                    <form id="updateTaskForm" action="/updateTask" method="post" class="updateTaskForm1">
                        <input type="hidden" name="subjectId" value="<%= subjectId %>">
                        <i class='bx bx-sidebar'></i>
                        <select id="taskType" name="taskType">
                            <option value="" disabled selected><%= taskTypes %></option>
                            <option value="งานทั่วไป">ทั่วไป</option>
                            <option value="การบ้าน">การบ้าน</option>
                            <option value="งานกลุ่ม">กลุ่ม</option>
                            <option value="งานแลป">แลป</option>
                            <option value="สอบ">สอบ</option>
                        </select>

                        <div class="select-warpper" id="selectWrapper">
                            <div id="statusText">
                                <h1><%= taskStatuses %></h1>
                            </div>
                            <select id="taskStatuses" name="taskStatuses" onchange="changeBackground()">
                                <option value="" disabled selected><%= taskStatuses %></option>
                                <option value="กำลังทำ" class="not-done">กำลังทำ</option>
                                <option value="เสร็จสิ้น" class="in-progress">เสร็จสิ้น</option>
                                <option value="แก้ไข" class="completed">แก้ไข</option>
                            </select>
                        </div>

                        <select id="taskPriority" name="taskPriority">
                            <option value="" disabled selected><%= taskPriority %></option>
                            <option value="เร่งด่วน">เร่งด่วน</option>
                            <option value="ปกติ">ปกติ</option>
                        </select>
                        <input type="hidden" name="taskId" value="<%= task._id %>">
                    </form>
                </div>

                <div class="seccondLine">
                    <form action="/updateTask" method="post" id="updateTaskForm" onsubmit="return validateForm()">
                        <h1 class="taskName" id="taskName-text">
                            <%= taskNames %>
                        </h1>
                        <input type="text" id="taskName" name="taskName" value="<%= taskNames %>" style="display: none;">
                        <span id="notiAlert" style="font-size: 14px; color: #FF004D; display: none; margin-top: 5px;">*
                            กรุณากรอกชื่อโดยไม่ใช้อักขระพิเศษ</span>
                        <span id="notiAlertName" style="font-size: 14px; color: #FF004D; display: none; margin-top: 5px;">*
                            มีชื่อนี้ภายในงานอยู่แล้ว กรุณากรอกชื่อใหม่</span>
                    
                        <div class="item-detailInfo">
                            <div id="info">
                                <span id="inf1">ผู้รับผิดชอบ</span>
                                <span id="inf2">
                                    <%= userName %>
                                </span>
                            </div>
                            <div id="info">
                                <span id="inf1">วันครบกำหนด</span>
                                <span id="dueDateText" style="cursor: pointer;">
                                    <%= dueDate  %>
                                </span>
                                <input type="text" id="dueDate" name="dueDate" value="<%= dueDate || '' %>" style="display: none;">
                            </div>
                            <div id="info">
                                <span id="inf1">แท็ก</span>
                                <span id="inf2_tag">  </span>
                            </div>
                        </div>
                        <span id="desText">
                            <i class='bx bxs-detail'></i>
                            <h1 class="taskDes">รายละเอียดของงาน</h1>
                        </span>
                        <div class="description">
                            <textarea name="taskDetail" id="taskDescription" cols="30" rows="10"><%= taskDetail %></textarea>
                            <div id="submitButtonContainer" style="display: none;">
                                <button type="submit" id="updateDetail">บันทึก</button>
                            </div>
                        </div>
                        <input type="hidden" name="taskId" id="taskId" value="<%= task._id %>">
                    </form>                    
                </div>

                <div class="thridLine">
                    <span id="desText">
                        <i class='bx bx-calendar-check'></i>
                        <h1 class="taskDes">งานย่อย</h1>
                    </span>
                    <div class="subTask-input" id="subTask-input">
                        <form action="/addSubtask" method="POST" class="subTask-form">
                            <input type="text" id="subTask" name="subTask" placeholder="+ เพิ่มงานย่อยของคุณเลย">
                            <input type="hidden" name="taskId" value="<%= task._id %>">
                            <button type="submit">Add Subtask</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="activity">
            <div class="topAct">
                <h1>กิจกรรมที่เกิดขึ้น</h1>
            </div>
            <div class="messageAct">
                <div class="activityUpdate">
                    <% task.activityLogs.forEach(log => { %>
                        <p><%= log %></p>
                    <% }) %>
                </div>
                <div class="comment">
                    <input type="text" placeholder="add comment">
                    <button id="sendComment">ส่ง</button>
                </div>
            </div>
        </div>

        <div class="showSubtask">
            <h3>Subtasks</h3>
            <ul>
              <% subtasks.forEach(subtask => { %>
                <li class="subtask-item <%= subtask.completed ? 'completed' : '' %>">
                  <input type="radio" name="completedSubtask" value="<%= subtask._id %>" 
                         onchange="toggleCompletion('<%= subtask._id %>', this)"
                         <%= subtask.completed ? 'checked' : '' %> />
                  <span><%= subtask.subtask_Name %></span>
                  <span class="date">(<%= new Date(subtask.createdAt).toLocaleDateString('th-TH') %>)</span>
                </li>
              <% }) %>
            </ul>
          </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Flatpickr with the date format
        const flatpickrInstance = flatpickr("#dueDate", {
            dateFormat: "Y-m-d",
            onChange: function(selectedDates, dateStr, instance) {
                // Update the displayed due date
                document.getElementById('dueDateText').innerText = new Date(dateStr).toLocaleDateString('th-TH');
                // Update the hidden input field
                document.getElementById('dueDate').value = dateStr;
                // Trigger form submission to save the changes
                document.getElementById('updateTaskForm').submit();
            }
        });

        // Event listener to show the Flatpickr date picker
        document.getElementById('dueDateText').addEventListener('click', function() {
            this.style.display = 'none'; // Hide the date display span
            const dueDateInput = document.getElementById('dueDate');
            dueDateInput.style.display = 'inline'; // Show the date input field
            dueDateInput.focus(); // Focus the input field
            flatpickrInstance.open(); // Open the date picker
        });

        // Event listener for the close button
        document.getElementById('close_btn').addEventListener('click', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const subjectId = urlParams.get('subjectId');
            window.location.href = `/subject/item/${subjectId}/task_list`;
        });

        // Function to get a random color
        function getRandomColor() {
            const letters = "0123456789ABCDEF";
            let color = "#";
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        // Get the container element for tags
        const tagContainer = document.getElementById('inf2_tag');

        // Get the task tags as an array
        const taskTags = '<%= taskTag %>'.split(',');

        // Define colors for each tag
        const tagColors = ['#FF5733', '#33FF57', '#5733FF', '#FF3357', '#57FF33'];

        // Create and append tag elements
        taskTags.forEach((tag, index) => {
            const tagElement = document.createElement('span');
            tagElement.textContent = tag.trim(); // Remove extra spaces
            tagElement.style.backgroundColor = tagColors[index % tagColors.length]; // Apply color
            tagElement.style.padding = '2px 6px';
            tagElement.style.marginRight = '5px';
            tagElement.style.borderRadius = '5px';
            tagElement.style.color = 'white';
            tagContainer.appendChild(tagElement);
        });
    });

    function toggleCompletion(subtaskId, radioBtn) {
        fetch('/toggleSubTaskCompletion', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({ subtaskId })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok.');
          }
          return response.json();
        })
        .then(data => {
          if (data.message === 'Subtask completion status toggled') {
            // Refresh the page to reflect the updated status
            location.reload();
          }
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }


      document.addEventListener('DOMContentLoaded', function() {
        const addUserBtn = document.getElementById('addUserBtn');
        const userListModal = document.getElementById('userListModal');
        const userList = document.getElementById('userList');

        addUserBtn.addEventListener('click', async () => {
            userListModal.style.display = 'block';

            try {
                const response = await fetch('/task/users');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const users = await response.json();

                userList.innerHTML = '';
                users.forEach(user => {
                    const li = document.createElement('li');
                    li.textContent = user.displayName || user.firstName + ' ' + user.lastName;
                    li.dataset.userId = user._id;
                    li.addEventListener('click', async () => {
                        const taskId = '<%= task._id %>';
                        const userId = li.dataset.userId;

                        const response = await fetch('/task/addUserToTask', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ taskId, userId })
                        });

                        if (response.ok) {
                            alert('User added to task');
                        } else {
                            alert('Failed to add user to task');
                        }

                        userListModal.style.display = 'none';
                    });
                    userList.appendChild(li);
                });
            } catch (error) {
                console.error('Fetch error:', error);
                alert('Failed to fetch users');
            }
        });
    });
</script>

    
    <script src="/script/taskScsript/task-item.js"></script>
    <script src="/script/taskScsript/task-alert.js"></script>
    <script src="/script/taskScsript/task-changBackground.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</body>


