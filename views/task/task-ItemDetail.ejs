<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        :root {
            --line: #d7d9dd;
            --more-line: #9a9a9a;
            --text1: #515761;
            --color1: #7952b3;
            --color2: #a788d4;
            --color4: #906fc3;
            --color3: #e4e9f6;
            --text2: #37352f;
            --light: #37352fa6;
            --more-light: #0a0a03d7;
            --notYet: #b5c0d0;
        }

        /* content page */
        .content {
            background-color: white;
            margin: 20px 20px 20px 120px;
            border-radius: 20px;
            display: flex;
            flex-direction: column;
            max-width: 1320px;
            max-height: max-content;
            min-height: 95vh;
        }

        .breadcomes {
            display: flex;
            align-items: center;
            font-size: 0.9em;
            color: var(--more-light);
            gap: 2px;
        }

        .breadcomes a {
            color: var(--text1);
            text-decoration: none;
            padding: 4px 8px;
            border-radius: 4px;
            transition: color 0.3s ease, background-color 0.3s ease;
        }

        .breadcomes a:hover {
            background-color: var(--color1);
            color: white;
        }

        .breadcomes .active-detail {
            background-color: var(--color1);
            color: #fff;
        }

        .breadcomes span {
            font-size: small;
        }

        .content .top-option {
            display: flex;
            border-bottom: solid 1px #00000049;
            align-items: center;
            padding: 20px;
        }

        .top-option .btn-option {
            align-self: self-end;
            display: flex;
            margin-left: auto;
            align-items: center;
        }

        .btn-option p {
            margin: 0 20px 0 0;
        }

        #close_btn_link {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            background-color: var(--more-light);
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            font-size: 1.2em;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        #close_btn_link:hover {
            background-color: #d04848;
            transform: scale(1.1);
            cursor: pointer;
        }

        #close_btn {
            display: inline-block;
            line-height: 1;
        }

        .content-Wrap #firstLine {
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: 25px;
            position: relative;
        }

        .section {
            display: flex;
            align-items: stretch;
        }

        .firstsec,
        .seccondsec {
            min-height: 300px;
            max-height: 900px;
        }

        .firstsec {
            width: 60%;
            padding: 40px;
        }

        .firstsec .seccondLine .taskName {
            font-size: 2em;
            font-weight: 400;
            color: var(--color1);
            margin: 20px 0;
            margin-top: 40px;
        }

        #taskName {
            font-size: 2em;
            width: 100%;
            font-weight: 400;
            color: #a8aaad;
            border: none;
            border-bottom: 2px solid #7952b3;
            margin: 20px 0;
            margin-top: 40px;
        }

        #taskName:focus {
            outline: none;
        }

        .seccondLine .item-detailInfo {
            display: flex;
            gap: 30px;
            width: 100%;
        }

        .item-detailInfo #info {
            display: flex;
            padding: 10px 20px;
            width: 150px;
            height: 95px;
            border: 1px solid var(--line);
            border-radius: 10px;
            flex-direction: column;
            justify-content: flex-start;
            gap: 10px;
        }

        .item-detailInfo #info #inf1 {
            font-size: 1em;
            font-weight: 500;
            color: var(--color4);
        }

        .item-detailInfo #info #inf2_tag {
            display: flex;
            overflow: auto;
        }

        #submitButtonContainer {
            
            width: 100%;
        }

        #updateDetail {
            margin-top: 10px;
            padding: 10px 20px;
            border-radius: 5px;
            background-color: #9571cc;
            color: white;
            border: 1px solid #d7d9dd;
            font-size: 1em;
            margin-left: 630px;
        }

        #updateDetail:hover {
            background-color: #7952b3;
            transition: 0.3s ease;
        }

        .select-warpper {
            border-radius: 5px;
            background-color: #f2f2f2;
            color: #515761;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 120px;
            height: 40px;
            font-size: 1em;
            text-align: center;
            border: 1px solid #d7d9dd;
            cursor: pointer;
        }

        .seccondLine #desText,
        .thridLine #desText {
            display: flex;
            flex-direction: row;
            align-items: center;
            margin: 20px 0 10px;
        }

        .seccondLine span .bxs-detail,
        .thridLine span .bx-calendar-check,
        .showSubtask span .bx-detail,
        .updateTaskForm1 .bx {
            color: var(--color1);
            font-size: 25px;
            margin-right: 10px;
            transition: none;
        }

        .seccondLine span .bxs-detail:hover,
        .thridLine span .bx-calendar-check:hover,
        .showSubtask span .bx-detail:hover {
            background-color: transparent;
            color: var(--color1);
        }

        .taskDes {
            font-size: 16px;
            font-weight: 400;
            width: fit-content;
            margin: 0;
        }

        .description {
            width: 100%;
            height: 200px;
            border-radius: 10px;
            border: 1px solid var(--line);
        }

        .description #taskDescription {
            width: 95%;
            height: 170px;
            margin: 15px 20px;
            resize: none;
            border: none;
        }

        .description #taskDescription:focus {
            outline: none;
        }

        /* Third Line */
        .thridLine {
            width: 100%;
        }

        .thridLine h1 {
            font-size: 16px;
            font-weight: 400;
        }

        .thridLine .subTask-input #subTask {
            width: 100%;
            height: 50px;
            padding: 20px;
            border: 2px solid var(--line);
            border-radius: 10px;
        }

        .thridLine .subTask-input #subTask:focus {
            outline: none;
            border-color: var(--light);
        }

        .thridLine button {
            display: none;
        }

        /* Third Line */
        .showSubtask {}

        .showSubtask .headshowsubtask {
            display: flex;
            flex-direction: row;
            align-items: center;
            margin: 20px 0 10px 0;
        }

        .headshowsubtask p {
            font-size: 16px;
            font-weight: 400;
            width: fit-content;
            margin: 0;
        }

        .showSubtask .detailshowsubtask {
            width: 100%;
            height: 150px;
            padding: 20px;
            border: 2px solid var(--line);
            border-radius: 10px;
        }

        .showSubtask .detailshowsubtask {
            overflow: auto;
        }

        .showSubtask .detailshowsubtask ul {
            padding: 0;
            list-style-type: none;
        }

        .detailshowsubtask ul button {
            padding-top: 10px;
        }

        .detailshowsubtask ul .subtask-item {
            display: flex;
            align-items: self-start;
            margin-bottom: 10px;
            width: fit-content;
        }

        .detailshowsubtask ul .checkbox {
            margin-top: 5px;
        }

        .detailshowsubtask ul .subtask-item span {
            white-space: normal;
            word-break: break-word;
            margin-left: 8px;
            display: inline-block;
        }

        .seccondsec {
            width: 40%;
            height: 900px;
            border-left: var(--line) solid 1px;
        }

        .seccondsec .topAct p {
            font-size: larger;
            padding: 20px;
            border-bottom: solid var(--line) 1px;
        }

        .seccondsec .activity .activityUpdate {
            padding: 0px 20px;
            overflow: auto;
            height: 720px;
        }

        .seccondsec .activity .comment {
            margin-top: 10px;
            border-top: solid var(--line) 1px;
            padding: 10px;
            align-items: center;
        }

        .comment .commentsec {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 10px;
        }

        .comment .commentsec input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid var(--line);
            border-radius: 5px;
            font-size: 1em;
        }

        .comment .commentsec button {
            padding: 8px 12px;
            background-color: var(--color1);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .comment .commentsec button:hover {
            background-color: var(--color2);
        }

        .updateTaskForm1 {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 20px;
        }

        #taskType,
        #taskStatuses,
        #taskPriority {
            text-align: center;
            width: 120px;
            height: 40px;
            font-size: 1em;
            color: #515761;
            border: 1px solid #d7d9dd;
            border-radius: 5px;
            background-color: transparent;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

        #statusText{
            font-size: 1em;
            margin-bottom: 0;
        }

        #taskType:focus,
        #taskStatuses:focus,
        #taskPriority:focus {
            outline: none;
        }

        .option {
            padding: 10px;
            cursor: pointer;
        }

        .subtask-item.completed {
            text-decoration: line-through;
            color: grey;
            opacity: 0.5;
        }

        .subtask-item {
            margin-bottom: 10px;
            margin-left: 10px;
        }

        .date {
            font-size: smaller;
            color: grey;
            margin-left: 10px;
        }




        #dueDate {
            border: none;
            width: 100px;
        }

        #dueDate:focus {
            outline: none;
        }

    </style>
</head>

<body>
    <%- include('../partials/nav_menu.ejs') %>
        <div class="content">
            <div class="top-option">
                <div class="breadcomes">
                    <a href="/subject">subject</a> <span>/</span>
                    <a href="/subject/item/<%= subjectId %>/task_list">list</a>
                    <span>/</span>
                    <a class="active-detail">
                        <%= taskNames %>
                    </a>
                </div>
                <div class="btn-option">
                    <p>สร้างเมื่อวันที่ <span id="createAt">
                            <%= createdAt %>
                        </span></p>
                    <a href="#" id="close_btn_link"><span id="close_btn">&times;</span></a>
                </div>
            </div>

            <div class="section">
                <div class="firstsec">
                    <div class="content-Wrap">
                        <div class="itemDetail">
                            <div id="firstLine">
                                <form id="updateTaskForm" action="/updateTask" method="post" class="updateTaskForm1">
                                    <input type="hidden" name="subjectId" value="<%= subjectId %>">
                                    <i class='bx bx-sidebar'></i>
                                    <select id="taskType" name="taskType">
                                        <option value="" disabled selected>
                                            <%= taskTypes %>
                                        </option>
                                        <option value="งานทั่วไป">ทั่วไป</option>
                                        <option value="การบ้าน">การบ้าน</option>
                                        <option value="งานกลุ่ม">กลุ่ม</option>
                                        <option value="งานแลป">แลป</option>
                                        <option value="สอบ">สอบ</option>
                                    </select>

                                    <div class="select-warpper" id="selectWrapper">
                                        <div>
                                            <p id="statusText">
                                                <%= taskStatuses %>
                                            </p>
                                        </div>
                                        <select id="taskStatuses" name="taskStatuses" onchange="changeBackground()">
                                            <option value="" disabled selected>
                                                <%= taskStatuses %>
                                            </option>
                                            <option value="กำลังทำ" class="not-done">กำลังทำ</option>
                                            <option value="เสร็จสิ้น" class="in-progress">เสร็จสิ้น</option>
                                            <option value="แก้ไข" class="completed">แก้ไข</option>
                                        </select>
                                    </div>

                                    <select id="taskPriority" name="taskPriority">
                                        <option value="" disabled selected>
                                            <%= taskPriority %>
                                        </option>
                                        <option value="เร่งด่วน">เร่งด่วน</option>
                                        <option value="ปกติ">ปกติ</option>
                                    </select>
                                    <input type="hidden" name="taskId" value="<%= task._id %>">
                                </form>
                            </div>

                            <div class="seccondLine">
                                <form action="/updateTask" method="post" id="updateTaskForm"
                                    onsubmit="return validateForm()">
                                    <h1 class="taskName" id="taskName-text" >
                                        <%= taskNames %>
                                    </h1>
                                    <input type="text" id="taskName" name="taskName" value="<%= taskNames %>" style="display: none;">
                                    <span id="notiAlert"
                                        style="font-size: 14px; color: #FF004D; display: none; margin-top: 5px;">*
                                        กรุณากรอกชื่อโดยไม่ใช้อักขระพิเศษ</span>
                                    <span id="notiAlertName"
                                        style="font-size: 14px; color: #FF004D; display: none; margin-top: 5px;">*
                                        มีชื่อนี้ภายในงานอยู่แล้ว กรุณากรอกชื่อใหม่</span>

                                    <div class="item-detailInfo">
                                        <div id="info">
                                            <span id="inf1">ผู้รับผิดชอบ</span>
                                            <span id="inf2" style="display: flex; align-items: center; margin: 5px 0;">
                                                <% if (tasks && tasks.length > 0) { %>
                                                    <% tasks.forEach(task => { %>
                                                        <% if (task.assignedUsers && task.assignedUsers.length > 0) { %>
                                                            <% task.assignedUsers.forEach(user => { %>
                                                                <div class="user-info">
                                                                    <img src="<%= user.profileImage %>" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px;">
                                                                </div>
                                                            <% }) %>
                                                        <% } else { %>
                                                            <span>ไม่พบผู้รับผิดชอบในงานนี้</span>
                                                        <% } %>
                                                    <% }) %>
                                                <% } else { %>
                                                    <span>ไม่มีงานที่เกี่ยวข้อง</span>
                                                <% } %>
                                            </span>
                                        </div>
                                        <div id="info">
                                            <span id="inf1">วันครบกำหนด</span>
                                            <span id="dueDateText">
                                                <%= dueDate %>
                                            </span>
                                            <input type="date" id="dueDate" name="dueDate" value="<%= dueDate %>" placeholder="<%= dueDate %>" style="display: none;">

                                        </div>
                                        
                                    </div>
                                    <span id="desText">
                                        <i class='bx bxs-detail'></i>
                                        <h1 class="taskDes">รายละเอียดของงาน</h1>
                                    </span>
                                    <div class="description">
                                        <textarea name="taskDetail" id="taskDescription" cols="30"
                                            rows="10"><%= taskDetail %></textarea>
                                    </div>
                                    <div id="submitButtonContainer" style="display: none;">
                                           <button type="submit" id="updateDetail">บันทึก</button>
                                    </div>
                                    <input type="hidden" name="taskId" id="taskId" value="<%= task._id %>">
                                </form>

                            </div>

                            <div class="thridLine">
                                <span id="desText">
                                    <i class="bx bx-calendar-check"></i>
                                    <h1 class="taskDes">งานย่อย</h1>
                                </span>
                                <div class="subTask-input" id="subTask-input">
                                    <form action="/addSubtask" method="POST" class="subTask-form">
                                        <input type="text" id="subTask" name="subTask"
                                            placeholder="+ เพิ่มงานย่อยของคุณเลย" />
                                        <input type="hidden" name="taskId" value="<%= task._id %>" />
                                        <button type="submit">เพิ่มงานย่อย</button>
                                    </form>
                                </div>
                            </div>

                            <div class="showSubtask">
                                <span class="headshowsubtask">
                                    <i class="bx bx-detail"></i>
                                    <p>รายละเอียดของงานย่อย</p>
                                </span>
                                <div class="detailshowsubtask">
                                    <ul>
                                        <% subtasks.forEach(subtask=> { %>
                                            <li style="width: fit-content"
                                                class="subtask-item <%= subtask.completed ? 'completed' : '' %>">
                                                <input type="checkbox" class="checkbox" id="checkbox_<%= subtask._id %>"
                                                    name="completedSubtask" value="<%= subtask._id %>"
                                                    onchange="toggleCompletion('<%= subtask._id %>', this)"
                                                    <%=subtask.completed ? 'checked' : '' %> />
                                                <div class="condetailshow">
                                                    <span>
                                                        <%= subtask.subtask_Name %>
                                                    </span>
                                                    <span class="date">
                                                        (<%= new Date(subtask.createdAt).toLocaleDateString('th-TH') %>)
                                                    </span>
                                                </div>
                                            </li>
                                            <% }) %>
                                    </ul>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <div class="seccondsec">
                    <div class="activity">
                        <div class="topAct">
                            <p>กิจกรรมที่เกิดขึ้น</p>
                        </div>
                        <div class="messageAct">
                            <div class="activityUpdate">
                                <% task.activityLogs.forEach(log=> { %>
                                    <p>
                                        <%= log %>
                                    </p>
                                    <% }) %>
                            </div>
                            <div class="comment">
                                <div class="commentsec">
                                    <input type="text" placeholder="add comment" />
                                    <button id="sendComment">ส่ง</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Array of Thai month names
                const thaiMonths = [
                    'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                    'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
                ];

                // Function to format date as "d month" in Thai
                function formatThaiDate(date) {
                    const day = date.getDate();
                    const month = thaiMonths[date.getMonth()];
                    return `${day} ${month}`;
                }

                // Initialize flatpickr for dueDate with auto-submit
                const flatpickrInstance = flatpickr("#dueDate", {
                    dateFormat: "Y-m-d",
                    onChange: function (selectedDates, dateStr, instance) {
                        if (dateStr) {
                            // Create a new Date object from the selected date string
                            const date = new Date(dateStr);

                            // Format the selected date to "d month" in Thai
                            const formattedDate = formatThaiDate(date);

                            // Update the dueDate text
                            const dueDateText = document.getElementById('dueDateText');
                            dueDateText.innerText = formattedDate;

                            // Update the dueDate input field value and placeholder
                            const dueDateInput = document.getElementById('dueDate');
                            dueDateInput.value = dateStr;
                            dueDateInput.placeholder = formattedDate; // Update placeholder

                            // Submit the form to save the data immediately
                            document.getElementById('updateTaskForm').submit(); // Trigger form submission
                        }
                    }
                });

                // Event listener to toggle dueDate input visibility and open date picker
                document.getElementById('dueDateText').addEventListener('click', function () {
                    this.style.display = 'none'; // Hide the date display span
                    const dueDateInput = document.getElementById('dueDate');
                    dueDateInput.style.display = 'inline'; // Show the date input field
                    dueDateInput.focus(); // Focus the input field
                    flatpickrInstance.open(); // Open the date picker
                });
            });

            // Close button event listener
            document.getElementById('close_btn').addEventListener('click', function () {
                const urlParams = new URLSearchParams(window.location.search);
                const subjectId = urlParams.get('subjectId');
                window.location.href = `/subject/item/${subjectId}/task_list`;
            });

            // Function to get a random color
            function getRandomColor() {
                const letters = "0123456789ABCDEF";
                let color = "#";
                for (let i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }

            // Get the container element for tags
            const tagContainer = document.getElementById('inf2_tag');

            // Get the task tags as an array
            const taskTags = '<%= taskTag %>'.split(',');

            // Define colors for each tag
            const tagColors = ['#FF5733', '#33FF57', '#5733FF', '#FF3357', '#57FF33'];

            // Create and append tag elements
            taskTags.forEach((tag, index) => {
                const tagElement = document.createElement('span');
                tagElement.textContent = tag.trim(); // Remove extra spaces
                tagElement.style.backgroundColor = tagColors[index % tagColors.length]; // Apply color
                tagElement.style.padding = '2px 6px';
                tagElement.style.marginRight = '5px';
                tagElement.style.borderRadius = '5px';
                tagElement.style.color = 'white';
                tagContainer.appendChild(tagElement);
            });

            document.addEventListener('DOMContentLoaded', () => {
                const dueDateDisplay = document.getElementById('dueDateDisplay');
                const dueDateInput = document.getElementById('dueDate');

                // Toggle visibility on click
                dueDateDisplay.addEventListener('click', () => {
                    dueDateDisplay.style.display = 'none'; // Hide the span
                    dueDateInput.style.display = 'block'; // Show the input
                    dueDateInput.focus(); // Optionally, focus the input
                });

                // Update the span and hide input when a new date is selected
                dueDateInput.addEventListener('change', () => {
                    const selectedDate = dueDateInput.value;
                    dueDateDisplay.textContent = new Date(selectedDate).toLocaleDateString('th-TH', {
                        day: 'numeric',
                        month: 'long',
                        year: 'numeric'
                    });
                    dueDateDisplay.style.display = 'block'; // Show the span
                    dueDateInput.style.display = 'none'; // Hide the input

                    // Submit the form to save the new date immediately
                    document.getElementById('updateTaskForm').submit(); // Trigger form submission
                });
            });

            function toggleCompletion(subtaskId, radioBtn) {
                fetch('/toggleSubTaskCompletion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ subtaskId })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.message === 'Subtask completion status toggled') {
                            // Refresh the page to reflect the updated status
                            location.reload();
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }

            document.addEventListener('DOMContentLoaded', function () {
                const addUserBtn = document.getElementById('addUserBtn');
                const userListModal = document.getElementById('userListModal');
                const userList = document.getElementById('userList');

                addUserBtn.addEventListener('click', async () => {
                    userListModal.style.display = 'block';

                    try {
                        const response = await fetch('/task/users');
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        const users = await response.json();

                        userList.innerHTML = '';
                        users.forEach(user => {
                            const li = document.createElement('li');
                            li.textContent = user.displayName || user.firstName + ' ' + user.lastName;
                            li.dataset.userId = user._id;
                            li.addEventListener('click', async () => {
                                const taskId = '<%= task._id %>';
                                const userId = li.dataset.userId;

                                const response = await fetch('/task/addUserToTask', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({ taskId, userId })
                                });

                                if (response.ok) {
                                    alert('User added to task');
                                } else {
                                    alert('Failed to add user to task');
                                }

                                userListModal.style.display = 'none';
                            });
                            userList.appendChild(li);
                        });
                    } catch (error) {
                        console.error('Fetch error:', error);
                        alert('Failed to fetch users');
                    }
                });
            });

        </script>
        <script src="/script/taskScsript/task-item.js"></script>
        <script src="/script/taskScsript/task-alert.js"></script>
        <script src="/script/taskScsript/task-changBackground.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</body>